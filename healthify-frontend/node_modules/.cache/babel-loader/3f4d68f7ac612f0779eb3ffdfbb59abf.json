{"ast":null,"code":"var _jsxFileName = \"D:\\\\Libraries\\\\Desktop\\\\CDAC\\\\e-HealthBuddy\\\\e-HealthBuddy-frontend\\\\e-healthbuddy-frontend\\\\src\\\\components\\\\CovidTrackerComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport CovidTrackerService from '../services/CovidTrackerService'; // class CovidTrackerComponent extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             country: []\n//         }\n//     }\n//     componentDidMount() {\n//         CovidTrackerService.getData().then(resp=>{\n//             this.setState({country: resp.data});\n//         })\n//     }\n//     render() {\n//         const d = {\n//             //labels: labels,\n//             datasets: [{\n//               label: 'My First Dataset',\n//               data: [65, 59, 80, 81, 56, 55, 40],\n//               fill: false,\n//               borderColor: 'rgb(75, 192, 192)',\n//               tension: 0.1\n//             }]\n//           };\n//         return (\n//             <Line data = {d}/>\n//         )\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CovidTrackerComponent = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n\n  const chart = () => {\n    let population,\n        total_cases,\n        total_deaths,\n        total_recovered = 0;\n    let cumulative_dates = [],\n        cumulative_cases = [],\n        cumulative_deaths = [],\n        cumulative_recovered = [];\n    CovidTrackerService.getData().then(res => {\n      const latest_data = res.data.latest_data;\n      population = res.data.population;\n      total_deaths = latest_data.deaths;\n      total_cases = latest_data.confirmed;\n      total_recovered = latest_data.recovered;\n      res.data.timeline.forEach(data => {\n        cumulative_dates.push(data.date);\n        cumulative_cases.push(data.confirmed);\n        cumulative_deaths.push(data.deaths);\n        cumulative_recovered.push(data.recovered);\n      }); // Getting daily recent 7 days data\n      //daily = timeline.slice(0,7);\n    }).catch(err => console.log(err));\n    console.log(population);\n    console.log(total_cases);\n    console.log(total_deaths);\n    setChartData({\n      labels: [],\n      datasets: [{\n        label: \"Cumulative\",\n        data: cumulative_cases,\n        backgroundColor: [\"rgba(75,192,192,0.6)\"],\n        borderWidth: 4\n      }]\n    });\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      title: {\n        text: \"Cumulative Graph\",\n        display: true\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 10,\n            beginAtZero: true\n          },\n          gridLines: {\n            display: false\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: false\n          }\n        }]\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CovidTrackerComponent, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n\n_c = CovidTrackerComponent;\nexport default CovidTrackerComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CovidTrackerComponent\");","map":{"version":3,"sources":["D:/Libraries/Desktop/CDAC/e-HealthBuddy/e-HealthBuddy-frontend/e-healthbuddy-frontend/src/components/CovidTrackerComponent.js"],"names":["React","useState","useEffect","Line","CovidTrackerService","CovidTrackerComponent","chartData","setChartData","chart","population","total_cases","total_deaths","total_recovered","cumulative_dates","cumulative_cases","cumulative_deaths","cumulative_recovered","getData","then","res","latest_data","data","deaths","confirmed","recovered","timeline","forEach","push","date","catch","err","console","log","labels","datasets","label","backgroundColor","borderWidth","responsive","title","text","display","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport CovidTrackerService from '../services/CovidTrackerService';\r\n\r\n// class CovidTrackerComponent extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             country: []\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         CovidTrackerService.getData().then(resp=>{\r\n//             this.setState({country: resp.data});\r\n//         })\r\n//     }\r\n\r\n//     render() {\r\n//         const d = {\r\n//             //labels: labels,\r\n//             datasets: [{\r\n//               label: 'My First Dataset',\r\n//               data: [65, 59, 80, 81, 56, 55, 40],\r\n//               fill: false,\r\n//               borderColor: 'rgb(75, 192, 192)',\r\n//               tension: 0.1\r\n//             }]\r\n//           };\r\n//         return (\r\n//             <Line data = {d}/>\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst CovidTrackerComponent = () => {\r\n    const [chartData, setChartData] = useState({});\r\n    \r\n    const chart = () => {\r\n        let population, total_cases, total_deaths, total_recovered = 0;\r\n        let cumulative_dates = [], cumulative_cases = [], cumulative_deaths = [], cumulative_recovered = [];\r\n\r\n        CovidTrackerService.getData()\r\n        .then(res=>{\r\n            const latest_data = res.data.latest_data;\r\n            population = res.data.population;\r\n            total_deaths = latest_data.deaths;\r\n            total_cases = latest_data.confirmed;\r\n            total_recovered = latest_data.recovered;\r\n            res.data.timeline.forEach(data=>{\r\n                cumulative_dates.push(data.date);\r\n                cumulative_cases.push(data.confirmed);\r\n                cumulative_deaths.push(data.deaths);\r\n                cumulative_recovered.push(data.recovered);\r\n            })\r\n\r\n            // Getting daily recent 7 days data\r\n            //daily = timeline.slice(0,7);\r\n\r\n        }).catch(err=>console.log(err));\r\n\r\n        console.log(population);\r\n        console.log(total_cases);\r\n        console.log(total_deaths);\r\n\r\n\r\n        setChartData({\r\n            labels: [],\r\n            datasets: [{\r\n                label: \"Cumulative\",\r\n                data: cumulative_cases,\r\n                backgroundColor: [\"rgba(75,192,192,0.6)\"],\r\n                borderWidth: 4\r\n            }]\r\n        });\r\n    }\r\n    useEffect(()=>{chart()}, []);\r\n\r\n    return (\r\n        <Line data = {chartData}\r\n            options = {{\r\n                responsive: true,\r\n                title: {text: \"Cumulative Graph\", display: true},\r\n                scales: {\r\n                    yAxes: [\r\n                        {\r\n                            ticks: {\r\n                                autoSkip: true,\r\n                                maxTicksLimit: 10,\r\n                                beginAtZero: true\r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }\r\n                    ],\r\n                    xAxes: [\r\n                        {\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }} />\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CovidTrackerComponent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}