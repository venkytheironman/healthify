{"ast":null,"code":"var _jsxFileName = \"D:\\\\Libraries\\\\Desktop\\\\CDAC\\\\e-HealthBuddy\\\\e-HealthBuddy-frontend\\\\e-healthbuddy-frontend\\\\src\\\\components\\\\CovidTrackerComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport CovidTrackerService from '../services/CovidTrackerService'; // class CovidTrackerComponent extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             country: []\n//         }\n//     }\n//     componentDidMount() {\n//         CovidTrackerService.getData().then(resp=>{\n//             this.setState({country: resp.data});\n//         })\n//     }\n//     render() {\n//         const d = {\n//             //labels: labels,\n//             datasets: [{\n//               label: 'My First Dataset',\n//               data: [65, 59, 80, 81, 56, 55, 40],\n//               fill: false,\n//               borderColor: 'rgb(75, 192, 192)',\n//               tension: 0.1\n//             }]\n//           };\n//         return (\n//             <Line data = {d}/>\n//         )\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CovidTrackerComponent = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({});\n\n  const chart = () => {\n    let population = 0,\n        total_cases = 0,\n        total_deaths = 0,\n        total_recovered;\n    let cumulative_dates = [],\n        cumulative_cases = [],\n        cumulative_deaths = [],\n        cumulative_recovered = [];\n    CovidTrackerService.getData().then(res => {\n      const latest_data = res.data.latest_data;\n      population = Number(res.data.population);\n      total_deaths = Number(latest_data.deaths);\n      total_cases = Number(latest_data.confirmed);\n      total_recovered = Number(latest_data.recovered);\n\n      for (let i = res.data.timeline.length - 1; i >= 0; i = i - 20) {\n        cumulative_dates.push(data.date);\n        cumulative_cases.push(Number(data.confirmed));\n        cumulative_deaths.push(Number(data.deaths));\n        cumulative_recovered.push(Number(data.recovered));\n      } // for(const data of res.data.timeline.reverse()){\n      //     cumulative_dates.push(data.date);\n      //     cumulative_cases.push(Number(data.confirmed));\n      //     cumulative_deaths.push(Number(data.deaths));\n      //     cumulative_recovered.push(Number(data.recovered));\n      // }\n      // Getting daily recent 7 days data\n      //daily = timeline.slice(0,7);\n\n\n      setChartData({\n        labels: cumulative_deaths,\n        datasets: [{\n          label: \"Confirmed\",\n          data: cumulative_cases,\n          backgroundColor: [\"rgba(75,192,192,0.6)\"],\n          borderWidth: 4\n        }, {\n          label: \"Deaths\",\n          data: cumulative_deaths,\n          backgroundColor: [\"rgba(255,192,192,0.6)\"],\n          borderWidth: 4\n        }]\n      });\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: true,\n      aspectRatio: 1,\n      title: {\n        text: \"Cumulative Graph\",\n        display: true\n      },\n      legend: {\n        display: true,\n        position: 'right'\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 10,\n            beginAtZero: true\n          },\n          gridLines: {\n            display: false\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: true\n          }\n        }]\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CovidTrackerComponent, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n\n_c = CovidTrackerComponent;\nexport default CovidTrackerComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"CovidTrackerComponent\");","map":{"version":3,"sources":["D:/Libraries/Desktop/CDAC/e-HealthBuddy/e-HealthBuddy-frontend/e-healthbuddy-frontend/src/components/CovidTrackerComponent.js"],"names":["React","useState","useEffect","Line","CovidTrackerService","CovidTrackerComponent","chartData","setChartData","chart","population","total_cases","total_deaths","total_recovered","cumulative_dates","cumulative_cases","cumulative_deaths","cumulative_recovered","getData","then","res","latest_data","data","Number","deaths","confirmed","recovered","i","timeline","length","push","date","labels","datasets","label","backgroundColor","borderWidth","catch","err","console","log","responsive","maintainAspectRatio","aspectRatio","title","text","display","legend","position","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport CovidTrackerService from '../services/CovidTrackerService';\r\n\r\n// class CovidTrackerComponent extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             country: []\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         CovidTrackerService.getData().then(resp=>{\r\n//             this.setState({country: resp.data});\r\n//         })\r\n//     }\r\n\r\n//     render() {\r\n//         const d = {\r\n//             //labels: labels,\r\n//             datasets: [{\r\n//               label: 'My First Dataset',\r\n//               data: [65, 59, 80, 81, 56, 55, 40],\r\n//               fill: false,\r\n//               borderColor: 'rgb(75, 192, 192)',\r\n//               tension: 0.1\r\n//             }]\r\n//           };\r\n//         return (\r\n//             <Line data = {d}/>\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst CovidTrackerComponent = () => {\r\n    const [chartData, setChartData] = useState({});\r\n    \r\n    const chart = () => {\r\n        let population = 0, total_cases = 0, total_deaths = 0, total_recovered;\r\n        let cumulative_dates = [], cumulative_cases = [], cumulative_deaths = [], cumulative_recovered = [];\r\n\r\n        CovidTrackerService.getData()\r\n        .then(res=>{\r\n            const latest_data = res.data.latest_data;\r\n            population = Number(res.data.population);\r\n            total_deaths = Number(latest_data.deaths);\r\n            total_cases = Number(latest_data.confirmed);\r\n            total_recovered = Number(latest_data.recovered);\r\n            for (let i = res.data.timeline.length-1; i>=0; i=i-20){\r\n                cumulative_dates.push(data.date);\r\n                cumulative_cases.push(Number(data.confirmed));\r\n                cumulative_deaths.push(Number(data.deaths));\r\n                cumulative_recovered.push(Number(data.recovered));\r\n            }\r\n            // for(const data of res.data.timeline.reverse()){\r\n            //     cumulative_dates.push(data.date);\r\n            //     cumulative_cases.push(Number(data.confirmed));\r\n            //     cumulative_deaths.push(Number(data.deaths));\r\n            //     cumulative_recovered.push(Number(data.recovered));\r\n            // }\r\n            // Getting daily recent 7 days data\r\n            //daily = timeline.slice(0,7);\r\n            setChartData({\r\n                labels: cumulative_deaths,\r\n                datasets: [\r\n                    {\r\n                        label: \"Confirmed\",\r\n                        data: cumulative_cases,\r\n                        backgroundColor: [\"rgba(75,192,192,0.6)\"],\r\n                        borderWidth: 4\r\n                    },\r\n                    {\r\n                        label: \"Deaths\",\r\n                        data: cumulative_deaths,\r\n                        backgroundColor: [\"rgba(255,192,192,0.6)\"],\r\n                        borderWidth: 4\r\n                    }\r\n                ]\r\n            });\r\n\r\n        }).catch(err=>console.log(err));\r\n    };\r\n    useEffect(()=>{chart()}, []);\r\n\r\n    return (\r\n        <Line data = {chartData}\r\n            options = {{\r\n                responsive: true,\r\n                maintainAspectRatio: true,\r\n                aspectRatio: 1,\r\n                title: {text: \"Cumulative Graph\", display: true},\r\n                legend: {display: true, position: 'right'},\r\n                scales: {\r\n                    yAxes: [\r\n                        {\r\n                            ticks: {\r\n                                autoSkip: true,\r\n                                maxTicksLimit: 10,\r\n                                beginAtZero: true\r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }\r\n                    ],\r\n                    xAxes: [\r\n                        {\r\n                            gridLines: {\r\n                                display: true\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }} />\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CovidTrackerComponent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}